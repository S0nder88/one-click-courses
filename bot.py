import asyncio
import datetime
import re
import requests
from urllib.parse import urlencode

from aiogram.utils import executor
from bs4 import BeautifulSoup

import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.bot import api
from aiogram.utils.exceptions import MessageToDeleteNotFound
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, message_id, message

from anticaptchaofficial.hcaptchaproxyless import *
from sqlite import UserDB, CourseDB, RequestDB

import config

bot = Bot(token=config.BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
CAPTCHA_API_KEY = "API KEY"

#  –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
user_db = UserDB('swdatabase.db')
course_db = CourseDB('swdatabase.db')
request_db = RequestDB('swdatabase.db')

# =====================================================================================================
# ====================================== –ü–†–ò–í–ï–¢–°–í–ò–ï ===================================================
# =====================================================================================================
session = requests.Session()

admins = [839490080]

courses_per_day = {}


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /alerts
@dp.message_handler(commands=['alerts'])
async def send_alerts(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admins:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = user_db.get_all_users()

    # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    media = None
    if message.photo:
        media = [types.InputMediaPhoto(media=photo.file_id) for photo in message.photo]
    elif message.video:
        media = [types.InputMediaVideo(media=video.file_id) for video in message.video]
    elif message.animation:
        media = [types.InputMediaAnimation(media=animation.file_id) for animation in message.animation]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in users:
        try:
            if media:
                await bot.send_media_group(chat_id=user.id, media=[types.InputMediaPhoto(media=media)],
                                           caption=message.text[len('/alerts '):])
            else:
                await bot.send_message(chat_id=user.id, text=message.text[len('/alerts '):])

        except Exception as e:
            print(f"Failed to send message to user {user.id}: {str(e)}")

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(users)}")


@dp.message_handler(commands=['start'])
async def start_handler(message: aiogram.types.Message):
    request_db.add_request(message.from_user.id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    user_id = message.from_user.id
    chat_id = '-1001735705501'
    member = await bot.get_chat_member(chat_id, user_id)
    if member.status == 'left':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url='https://t.me/rare_hood'))
        keyboard.add(InlineKeyboardButton(text='üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscription'))
        await message.answer(f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=keyboard)
    else:
        if not user_db.user_exist(user_id):
            user_db.add_user(user_id)

            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton('ü§ñ –£—Å–ª—É–≥–∏ –∫–æ–¥–µ—Ä–∞'))
            keyboard.add(KeyboardButton('‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

            await message.answer("üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞:\n\nhttps://s1.sharewood.co/",
                                 reply_markup=keyboard)

            chatt_id = '-834856996'
            username = message.from_user.username
            text = f"‚ûñ @{username} - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            await bot.send_message(chatt_id, text)

        else:
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton('ü§ñ –£—Å–ª—É–≥–∏ –∫–æ–¥–µ—Ä–∞'))
            keyboard.add(KeyboardButton('‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

            await message.answer("üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞:\n\nhttps://s1.sharewood.co/",
                                 reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data == 'check_subscription')
async def check_subscription_handler(query: types.CallbackQuery):
    user_id = query.from_user.id
    chat_id = '-1001735705501'
    member = await bot.get_chat_member(chat_id, user_id)
    if member.status == 'left':
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url='https://t.me/rare_hood'))
        await bot.send_message(chat_id=query.message.chat.id, text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.', reply_markup=keyboard)
    else:
        await bot.answer_callback_query(query.id)
        try:
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        except MessageToDeleteNotFound:
            pass
        await start_bot(query.message, user_id)


async def start_bot(message: types.Message, user_id: int):
    request_db.add_request(user_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    if not user_db.user_exist(user_id):
        user_db.add_user(user_id)

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('ü§ñ –£—Å–ª—É–≥–∏ –∫–æ–¥–µ—Ä–∞'))
        keyboard.add(KeyboardButton('‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

        await message.answer("üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞:\n\nhttps://s1.sharewood.co/",
                             reply_markup=keyboard)

        chatt_id = '-834856996'
        username = message.from_user.username
        text = f"‚ûñ @{username} - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await bot.send_message(chatt_id, text)

    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('ü§ñ –£—Å–ª—É–≥–∏ –∫–æ–¥–µ—Ä–∞'))
        keyboard.add(KeyboardButton('‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

        await message.answer("üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞:\n\nhttps://s1.sharewood.co/",
                             reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "ü§ñ –£—Å–ª—É–≥–∏ –∫–æ–¥–µ—Ä–∞")
async def coder_buttons(message: types.Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    buttons_text = message.text
    text = "<b>ü¶æ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç?</b> –ú–æ–∂–µ—Ç —É —Ç–µ–±—è –µ—Å—Ç—å –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è –∏–¥–µ—è, –Ω–æ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ –µ–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?\n–¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É :)\n\n‚ñ´Ô∏è –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–≤–æ–∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥—É–º–∫–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n‚ûñ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–æ–≤\n‚ûñ –†–∞–∑–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–∞–π—Ç—ã: –ª–µ–Ω–¥–∏–Ω–≥, –º–∞–≥–∞–∑–∏–Ω, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç –∏ —Ç–æ, —á—Ç–æ –≤—Ä–æ–¥–µ –∫–∞–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –Ω–æ –Ω–µ –¥–ª—è –Ω–∞—Å\n‚ûñ –î–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Å–æ—Ñ—Ç (—á–µ–∫–µ—Ä—ã, —Å–æ—Ä—Ç–µ—Ä—ã)\n‚ûñ –ú—ã –ø—Ä–∏–≤–Ω–æ—Å–∏–º –≤ –≤–∞—à—É –∏–¥–µ—é —Å–≤–æ–π –æ–±—à–∏—Ä–Ω—ã–π –æ–ø—ã—Ç!\n\n‚ñ´Ô∏è 95% –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–æ –º–Ω–æ–π –∫–æ–≥–¥–∞-–ª–∏–±–æ - –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ —Å–µ–π –¥–µ–Ω—å, —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –º–Ω–æ–≥–æ–º!\n‚óæÔ∏è –ü–∏—à–∏—Ç–µ, –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –∏ –Ω–∞–π–¥—ë–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!\nüî• –°–≤—è–∑—å: @Rare_c0de\nüìç–ö–∞–Ω–∞–ª: @rare_hood "
    photo_path = './hood_rare.jpg'
    photo = open(photo_path, 'rb')
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="üóë –£–±—Ä–∞—Ç—å", callback_data="remove"))
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=text, reply_markup=markup)


@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistic_buttons(message: types.Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    course_count = course_db.get_course_count()
    # request_count_today = request_db.get_request_count_today()
    # request_count_total = request_db.get_request_count_total()
    user_count = user_db.get_user_count()

    text = f"üïã –ö—É—Ä—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {course_count}\nüôé‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {user_count}"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="üóë –£–±—Ä–∞—Ç—å", callback_data="remove"))
    await bot.send_message(message.chat.id, text, reply_markup=markup)


@dp.callback_query_handler(lambda query: query.data == 'remove')
async def remove_message(query: types.CallbackQuery):
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)


async def send_wait_message(chat_id):
    message_text = 'üòâ –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–µ–π—á–∞—Å —è –≤—Å—ë –¥–æ—Å—Ç–∞–Ω—É...'
    message = await bot.send_message(chat_id, message_text)
    dots = ['.  ', '.. ', '...']
    counter = 0
    while counter < 10:
        await asyncio.sleep(1)
        new_message_text = f'üòâ –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–µ–π—á–∞—Å —è –≤—Å—ë –¥–æ—Å—Ç–∞–Ω—É{dots[counter%3]}'
        if new_message_text != message_text:
            asyncio.create_task(bot.edit_message_text(new_message_text, chat_id, message.message_id))
            message_text = new_message_text
        counter += 1


@dp.message_handler()
async def message_handler(message: types.Message):
    global courses_per_day  # –æ–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    user_id = message.from_user.id
    today = datetime.now().date()
    if user_id not in courses_per_day:
        courses_per_day[user_id] = [(today, 1)]
    else:
        if courses_per_day[user_id][-1][0] == today:
            if courses_per_day[user_id][-1][1] >= 3:
                await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
                return
            else:
                courses_per_day[user_id][-1] = (today, courses_per_day[user_id][-1][1] + 1)
        else:
            courses_per_day[user_id].append((today, 1))

    if message.from_user and re.match(r'^https?://[\w\-\.~:/\?#\[\]@!\$&\'\(\)\*\+,;=%]+$', message.text):
        course_url = message.text
        channel_id = "-834856996"
        message_text = f"üî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å "
        await bot.send_message(channel_id, message_text,)
        await send_wait_message(message.chat.id)
        course_info = course_db.get_url(course_url)
        if course_info:
            title, download_url = course_info[0], course_info[1]
            message_text = f"<b>üíé –ö—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üíé</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ: {title}</b>\n\n\n<a href='{download_url}'>–°–∫–∞—á–∞—Ç—å –∫—É—Ä—Å </a>"
            await message.answer(message_text, parse_mode="HTML")
        else:  # –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not session.cookies.get_dict().get('xf_user'):
                # get csrf_token, site_key
                while True:
                    try:
                        response = session.get('https://s1.sharewood.co/login/')
                        soup = BeautifulSoup(response.content, "html.parser")
                        csrf_token = soup.find("input", {"name": "_xfToken", "type": "hidden"}).get("value")
                        site_key = soup.find("div", {'data-xf-init': "h-captcha"}).get("data-sitekey")
                        break
                    except api.exceptions.ApiError as e:
                        if e.error_code == "ERROR_RECAPTCHA_INVALID_SITEKEY":
                            continue
                        else:
                            raise e

                # captcha
                solver = hCaptchaProxyless()
                solver.set_verbose(1)
                solver.set_key(CAPTCHA_API_KEY)
                solver.set_website_url('https://s1.sharewood.co/login/')
                solver.set_website_key(site_key)
                g_response = solver.solve_and_return_solution()
                if g_response == 0:
                    return
                captcha_response = g_response
                data = {
                    "_xfToken": csrf_token,
                    "login": "hopawoc397@altpano.com",
                    "password": "ksdfj82347Hkd",
                    'g-recaptcha-response': captcha_response,
                    "h-captcha-response": captcha_response,
                    'remember': '1',
                }
                encoded_data = urlencode(data)
                headers = {
                    'content-type': 'application/x-www-form-urlencoded',
                    'origin': 'https://s1.sharewood.co',
                    'referer': 'https://s1.sharewood.co/login/',
                }
                response = session.post('https://s1.sharewood.co/login/login', data=encoded_data, headers=headers)
            while course_url:
                response = session.get(course_url)
                soup = BeautifulSoup(response.content, "html.parser")
                csrf_token = soup.find("input", {"name": "_xfToken", "type": "hidden"}).get("value")
                response = requests.get(course_url)
                html = response.text
                pattern = r'/posts/(\d+)/(reactions|share)'
                match = re.search(pattern, html)
                post_id = match.group(1)
                like_url = f"https://s1.sharewood.co/posts/{post_id}/react?reaction_id=1"
                payload = {
                    "reaction_id": "1",
                    "_xfWithData": "1",
                    "_xfToken": csrf_token,
                    "_xfResponseType": "json"
                }
                encoded_data = urlencode(payload)
                headers = {
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'origin': 'https://s1.sharewood.co',
                    'referer': course_url,
                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',
                }
                session.post(like_url, data=encoded_data, headers=headers)

                time.sleep(1)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –æ –∫—É—Ä—Å–µ
                response = session.get(course_url)

                soup = BeautifulSoup(response.content, 'html.parser')
                title = soup.find("h1", {"class": "p-title-value"}).text.strip()
                description = soup.find("div", {"class": "bbWrapper"}).text.strip()
                bb_code_block = soup.find('div', class_='bbCodeBlock bbCodeBlock--hide clike')

                content = bb_code_block.find('div', class_='bbCodeBlock-content')

                download_link = content.find('a')['href']

                course_db.add_link(course_url, title, download_link)

                message_text = f"<b>üíé –ö—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üíé</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ: {title}</b>\n\n\n<a href='{download_link}'>üëâüèª –°–∫–∞—á–∞—Ç—å –∫—É—Ä—Å  </a>"
                await message.answer(message_text, parse_mode="HTML")

                await message.answer("<b>‚ñ´Ô∏è –ß—Ç–æ-–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É</b>")
                await message.delete()

                try:
                    next_message = await dp.bot.wait_for('message', chat_id=message.chat.id)
                    course_url = next_message.text
                except TypeError:
                    course_url = None


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
